// 438. Find All Anagrams in a String
// https://leetcode.com/problems/find-all-anagrams-in-a-string/


class Solution {
public:
    vector<int> findAnagrams(string s, string p) 
    {
        /*
        time limit exceeded
        
        int i,j,n=s.length(),m=p.length();
        map<string,vector<int>> mp;
        
        for(i=0;i<=n-m;i++)
        {
            string s1=s.substr(i,m);
            sort(s1.begin(),s1.end());
            mp[s1].push_back(i);
            cout<<i<<" "<<s1<<endl;
        }
        
        sort(p.begin(),p.end());
        return mp[p];
        */
        
        string pat=p,txt=s;
        vector<int> ans;
        unordered_map<char,int> mp;
	    int anaCount=0;
	    for(int i=0;i<pat.length();i++)
	     mp[pat[i]]++;
	     int count=mp.size();
	     int j=0,i=0,k=pat.length();
	     int n=txt.length();
	     while(j<n)
	     {
	         if(mp.find(txt[j])!=mp.end())
	         {
	             mp[txt[j]]--;
	              if(mp[txt[j]]==0)
	               count--;
	         }
	              
	            
	       
	         if((j-i+1)<k) j++;
	         
	         else if((j-i+1) == k)
	         {
	             if(count==0) //anaCount++;
                     ans.push_back(j-k+1);
	             
	             if(mp.find(txt[i])!=mp.end())
	             {
	                 mp[txt[i]]++;
	                 if( mp[txt[i]]==1)
	                 count++;
	             }
	               i++,j++;
	         }
	         
	     }
	     return ans;
        
        
    }
    
    
    
};
